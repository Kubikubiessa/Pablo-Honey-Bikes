{"ast":null,"code":"import { makeVar, InMemoryCache } from \"@apollo/client\";\nexport const orderItemsVar = makeVar([]);\nexport const CustomInMemoryCache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        orderItems: {\n          read() {\n            return orderItemsVar();\n          }\n        }\n      }\n    },\n    Mutation: {\n      fields: {\n        createOrder(_, _ref) {\n          let {\n            args,\n            cache\n          } = _ref;\n          // Handle cache updates after the createOrder mutation\n          cache.evict({\n            fieldName: \"orderItems\"\n          });\n          return null;\n        },\n        updateOrder(_, _ref2) {\n          let {\n            args,\n            cache\n          } = _ref2;\n          // Handle cache updates after the updateOrder mutation\n          const {\n            id,\n            status\n          } = args;\n          const data = cache.readQuery({\n            query: GET_ORDER\n          });\n          if (data && data.orderItems) {\n            const updatedItems = data.orderItems.map(item => {\n              if (item.id === id) {\n                return {\n                  ...item,\n                  status: status\n                };\n              }\n              return item;\n            });\n            cache.writeQuery({\n              query: GET_ORDER,\n              data: {\n                orderItems: updatedItems\n              }\n            });\n          }\n          return null;\n        },\n        deleteOrder(_, _ref3) {\n          let {\n            args,\n            cache\n          } = _ref3;\n          // Handle cache updates after the deleteOrder mutation\n          const {\n            id\n          } = args;\n          const data = cache.readQuery({\n            query: GET_ORDER_ITEMS\n          });\n          if (data && data.orderItems) {\n            const updatedItems = data.orderItems.filter(item => item.id !== id);\n            cache.writeQuery({\n              query: GET_ORDER_ITEMS,\n              data: {\n                orderItems: updatedItems\n              }\n            });\n          }\n          return null;\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["makeVar","InMemoryCache","orderItemsVar","CustomInMemoryCache","typePolicies","Query","fields","orderItems","read","Mutation","createOrder","_","_ref","args","cache","evict","fieldName","updateOrder","_ref2","id","status","data","readQuery","query","GET_ORDER","updatedItems","map","item","writeQuery","deleteOrder","_ref3","GET_ORDER_ITEMS","filter"],"sources":["/Users/heidrunkubiessa/Bootcamp/repos/personal/Pablo-Honey-Bikes/client/src/utils/cache.js"],"sourcesContent":["import { makeVar, InMemoryCache } from \"@apollo/client\";\nexport const orderItemsVar = makeVar([]);\n\nexport const CustomInMemoryCache = new InMemoryCache({\n    typePolicies: {\n        Query: {\n            fields: {\n                orderItems:{\n                    read() {\n                        return orderItemsVar();\n                    }\n                }\n            }\n        },\n        Mutation: {\n            fields: {\n              createOrder(_, { args, cache }) {\n                // Handle cache updates after the createOrder mutation\n                cache.evict({ fieldName: \"orderItems\" });\n      \n                return null;\n              },\n              updateOrder(_, { args, cache }) {\n                // Handle cache updates after the updateOrder mutation\n                const { id, status } = args;\n                const data = cache.readQuery({ query: GET_ORDER });\n      \n                if (data && data.orderItems) {\n                  const updatedItems = data.orderItems.map((item) => {\n                    if (item.id === id) {\n                      return {\n                        ...item,\n                        status: status\n                      };\n                    }\n                    return item;\n                  });\n      \n                  cache.writeQuery({\n                    query: GET_ORDER,\n                    data: { orderItems: updatedItems }\n                  });\n                }\n      \n                return null;\n              },\n              deleteOrder(_, { args, cache }) {\n                // Handle cache updates after the deleteOrder mutation\n                const { id } = args;\n                const data = cache.readQuery({ query: GET_ORDER_ITEMS });\n      \n                if (data && data.orderItems) {\n                  const updatedItems = data.orderItems.filter((item) => item.id !== id);\n      \n                  cache.writeQuery({\n                    query: GET_ORDER_ITEMS,\n                    data: { orderItems: updatedItems }\n                  });\n                }\n      \n                return null;\n              }\n            }\n          }}\n});"],"mappings":"AAAA,SAASA,OAAO,EAAEC,aAAa,QAAQ,gBAAgB;AACvD,OAAO,MAAMC,aAAa,GAAGF,OAAO,CAAC,EAAE,CAAC;AAExC,OAAO,MAAMG,mBAAmB,GAAG,IAAIF,aAAa,CAAC;EACjDG,YAAY,EAAE;IACVC,KAAK,EAAE;MACHC,MAAM,EAAE;QACJC,UAAU,EAAC;UACPC,IAAIA,CAAA,EAAG;YACH,OAAON,aAAa,EAAE;UAC1B;QACJ;MACJ;IACJ,CAAC;IACDO,QAAQ,EAAE;MACNH,MAAM,EAAE;QACNI,WAAWA,CAACC,CAAC,EAAAC,IAAA,EAAmB;UAAA,IAAjB;YAAEC,IAAI;YAAEC;UAAM,CAAC,GAAAF,IAAA;UAC5B;UACAE,KAAK,CAACC,KAAK,CAAC;YAAEC,SAAS,EAAE;UAAa,CAAC,CAAC;UAExC,OAAO,IAAI;QACb,CAAC;QACDC,WAAWA,CAACN,CAAC,EAAAO,KAAA,EAAmB;UAAA,IAAjB;YAAEL,IAAI;YAAEC;UAAM,CAAC,GAAAI,KAAA;UAC5B;UACA,MAAM;YAAEC,EAAE;YAAEC;UAAO,CAAC,GAAGP,IAAI;UAC3B,MAAMQ,IAAI,GAAGP,KAAK,CAACQ,SAAS,CAAC;YAAEC,KAAK,EAAEC;UAAU,CAAC,CAAC;UAElD,IAAIH,IAAI,IAAIA,IAAI,CAACd,UAAU,EAAE;YAC3B,MAAMkB,YAAY,GAAGJ,IAAI,CAACd,UAAU,CAACmB,GAAG,CAAEC,IAAI,IAAK;cACjD,IAAIA,IAAI,CAACR,EAAE,KAAKA,EAAE,EAAE;gBAClB,OAAO;kBACL,GAAGQ,IAAI;kBACPP,MAAM,EAAEA;gBACV,CAAC;cACH;cACA,OAAOO,IAAI;YACb,CAAC,CAAC;YAEFb,KAAK,CAACc,UAAU,CAAC;cACfL,KAAK,EAAEC,SAAS;cAChBH,IAAI,EAAE;gBAAEd,UAAU,EAAEkB;cAAa;YACnC,CAAC,CAAC;UACJ;UAEA,OAAO,IAAI;QACb,CAAC;QACDI,WAAWA,CAAClB,CAAC,EAAAmB,KAAA,EAAmB;UAAA,IAAjB;YAAEjB,IAAI;YAAEC;UAAM,CAAC,GAAAgB,KAAA;UAC5B;UACA,MAAM;YAAEX;UAAG,CAAC,GAAGN,IAAI;UACnB,MAAMQ,IAAI,GAAGP,KAAK,CAACQ,SAAS,CAAC;YAAEC,KAAK,EAAEQ;UAAgB,CAAC,CAAC;UAExD,IAAIV,IAAI,IAAIA,IAAI,CAACd,UAAU,EAAE;YAC3B,MAAMkB,YAAY,GAAGJ,IAAI,CAACd,UAAU,CAACyB,MAAM,CAAEL,IAAI,IAAKA,IAAI,CAACR,EAAE,KAAKA,EAAE,CAAC;YAErEL,KAAK,CAACc,UAAU,CAAC;cACfL,KAAK,EAAEQ,eAAe;cACtBV,IAAI,EAAE;gBAAEd,UAAU,EAAEkB;cAAa;YACnC,CAAC,CAAC;UACJ;UAEA,OAAO,IAAI;QACb;MACF;IACF;EAAC;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}