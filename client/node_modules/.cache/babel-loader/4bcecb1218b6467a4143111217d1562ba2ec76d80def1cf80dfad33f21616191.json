{"ast":null,"code":"var _jsxFileName = \"/Users/heidrunkubiessa/Bootcamp/repos/personal/Pablo-Honey-Bikes/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\nimport { ApolloClient,\n// InMemoryCache,\nApolloProvider, createHttpLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { CustomInMemoryCache } from './utils/cache';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:3001/graphql\"\n});\nconst authLink = setContext((_, _ref) => {\n  let {\n    headers\n  } = _ref;\n  // get the authentication token from  storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n});\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: CustomInMemoryCache\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 35\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","ApolloClient","ApolloProvider","createHttpLink","setContext","CustomInMemoryCache","jsxDEV","_jsxDEV","httpLink","uri","authLink","_","_ref","headers","token","localStorage","getItem","authorization","client","link","concat","cache","root","createRoot","document","getElementById","render","children","StrictMode","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/heidrunkubiessa/Bootcamp/repos/personal/Pablo-Honey-Bikes/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  // InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { CustomInMemoryCache } from './utils/cache';\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:3001/graphql\",\n});\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from  storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: CustomInMemoryCache,\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <ApolloProvider client={client}><React.StrictMode>\n  <App />\n</React.StrictMode></ApolloProvider>\n  \n    \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB;AACA,SACEC,YAAY;AACZ;AACAC,cAAc,EACdC,cAAc,QACT,gBAAgB;AACvB,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,mBAAmB,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,QAAQ,GAAGL,cAAc,CAAC;EAC9BM,GAAG,EAAE;AACP,CAAC,CAAC;AACF,MAAMC,QAAQ,GAAGN,UAAU,CAAC,CAACO,CAAC,EAAAC,IAAA,KAAkB;EAAA,IAAhB;IAAEC;EAAQ,CAAC,GAAAD,IAAA;EACzC;EACA,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAC9C;EACA,OAAO;IACLH,OAAO,EAAE;MACP,GAAGA,OAAO;MACVI,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAC,GAAG;IAC7C;EACF,CAAC;AACH,CAAC,CAAC;AACF,MAAMI,MAAM,GAAG,IAAIjB,YAAY,CAAC;EAC9B;EACAkB,IAAI,EAAET,QAAQ,CAACU,MAAM,CAACZ,QAAQ,CAAC;EAC/Ba,KAAK,EAAEhB;AACT,CAAC,CAAC;AACF,MAAMiB,IAAI,GAAGvB,QAAQ,CAACwB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTnB,OAAA,CAACL,cAAc;EAACgB,MAAM,EAAEA,MAAO;EAAAS,QAAA,eAACpB,OAAA,CAACT,KAAK,CAAC8B,UAAU;IAAAD,QAAA,eACjDpB,OAAA,CAACP,GAAG;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AACU;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,QAAiB,CAGnC;;AAED;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}